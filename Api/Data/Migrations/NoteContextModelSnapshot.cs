// <auto-generated />
using System;
using Api.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(NoteContext))]
    partial class NoteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.DAL.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenido")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Creada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contenido = "Configuración inicial del proyecto .NET con Docker y Postgres.",
                            Creada = new DateTimeOffset(new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Titulo = "Primer apunte"
                        },
                        new
                        {
                            Id = 2,
                            Contenido = "Agregar validaciones de modelo y respuestas 400/404 en los endpoints.",
                            Creada = new DateTimeOffset(new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Titulo = "Recordatorio"
                        },
                        new
                        {
                            Id = 3,
                            Contenido = "Probar el deploy en Render y verificar las migraciones automáticas.",
                            Creada = new DateTimeOffset(new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Titulo = "Pendiente"
                        },
                        new
                        {
                            Id = 4,
                            Contenido = "Implementar JWT para autenticar las operaciones sobre notas.",
                            Creada = new DateTimeOffset(new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Titulo = "Idea futura"
                        },
                        new
                        {
                            Id = 5,
                            Contenido = "Recordar CAMS: Culture, Automation, Measurement, Sharing.",
                            Creada = new DateTimeOffset(new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Titulo = "Machete DevOps"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
